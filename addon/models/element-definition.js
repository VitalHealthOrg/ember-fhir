import DS from 'ember-data';
import Element from 'ember-fhir/models/element';

const { attr, belongsTo, hasMany } = DS;

export default Element.extend({
  path: attr('string'),
  representation: attr(),
  sliceName: attr('string'),
  label: attr('string'),
  code: hasMany('coding', { async: true }),
  slicing: belongsTo('element-definition-slicing', { async: false }),
  short: attr('string'),
  definition: attr('string'),
  comment: attr('string'),
  requirements: attr('string'),
  alias: attr(),
  min: attr('number'),
  max: attr('string'),
  base: belongsTo('element-definition-base', { async: false }),
  contentReference: attr('string'),
  type_: hasMany('element-definition-type', { async: true }),
  defaultValueBoolean: attr('boolean', { allowNull: true }),
  defaultValueInteger: attr('number'),
  defaultValueDecimal: attr('number'),
  defaultValueBase64Binary: attr('string'),
  defaultValueInstant: attr('string'),
  defaultValueString: attr('string'),
  defaultValueUri: attr('string'),
  defaultValueDate: attr('date'),
  defaultValueDateTime: attr('date'),
  defaultValueTime: attr('date'),
  defaultValueCode: attr('string'),
  defaultValueOid: attr('string'),
  defaultValueUuid: attr('string'),
  defaultValueId: attr('string'),
  defaultValueUnsignedInt: attr('number'),
  defaultValuePositiveInt: attr('number'),
  defaultValueMarkdown: attr('string'),
  defaultValueElement: belongsTo('element', { async: false, inverse: 'extension' }),
  defaultValueExtension: belongsTo('extension', { async: false, inverse: null }),
  defaultValueBackboneElement: belongsTo('backbone-element', { async: false, inverse: null }),
  defaultValueNarrative: belongsTo('narrative', { async: false }),
  defaultValueAnnotation: belongsTo('annotation', { async: false }),
  defaultValueAttachment: belongsTo('attachment', { async: false }),
  defaultValueIdentifier: belongsTo('identifier', { async: false }),
  defaultValueCodeableConcept: belongsTo('codeable-concept', { async: false }),
  defaultValueCoding: belongsTo('coding', { async: false }),
  defaultValueQuantity: belongsTo('quantity', { async: false }),
  defaultValueDuration: belongsTo('duration', { async: false }),
  defaultValueSimpleQuantity: belongsTo('quantity', { async: false }),
  defaultValueDistance: belongsTo('distance', { async: false }),
  defaultValueCount: belongsTo('count', { async: false }),
  defaultValueMoney: belongsTo('money', { async: false }),
  defaultValueAge: belongsTo('age', { async: false }),
  defaultValueRange: belongsTo('range', { async: false }),
  defaultValuePeriod: belongsTo('period', { async: false }),
  defaultValueRatio: belongsTo('ratio', { async: false }),
  defaultValueReference: belongsTo('reference', { async: false }),
  defaultValueSampledData: belongsTo('sampled-data', { async: false }),
  defaultValueSignature: belongsTo('signature', { async: false }),
  defaultValueHumanName: belongsTo('human-name', { async: false }),
  defaultValueAddress: belongsTo('address', { async: false }),
  defaultValueContactPoint: belongsTo('contact-point', { async: false }),
  defaultValueTiming: belongsTo('timing', { async: false }),
  defaultValueMeta: belongsTo('meta', { async: false }),
  defaultValueElementDefinition: belongsTo('element-definition', { async: false, inverse: null }),
  defaultValueContactDetail: belongsTo('contact-detail', { async: false }),
  defaultValueContributor: belongsTo('contributor', { async: false }),
  defaultValueDosage: belongsTo('dosage', { async: false }),
  defaultValueRelatedArtifact: belongsTo('related-artifact', { async: false }),
  defaultValueUsageContext: belongsTo('usage-context', { async: false }),
  defaultValueDataRequirement: belongsTo('data-requirement', { async: false }),
  defaultValueParameterDefinition: belongsTo('parameter-definition', { async: false }),
  defaultValueTriggerDefinition: belongsTo('trigger-definition', { async: false }),
  meaningWhenMissing: attr('string'),
  orderMeaning: attr('string'),
  fixedBoolean: attr('boolean', { allowNull: true }),
  fixedInteger: attr('number'),
  fixedDecimal: attr('number'),
  fixedBase64Binary: attr('string'),
  fixedInstant: attr('string'),
  fixedString: attr('string'),
  fixedUri: attr('string'),
  fixedDate: attr('date'),
  fixedDateTime: attr('date'),
  fixedTime: attr('date'),
  fixedCode: attr('string'),
  fixedOid: attr('string'),
  fixedUuid: attr('string'),
  fixedId: attr('string'),
  fixedUnsignedInt: attr('number'),
  fixedPositiveInt: attr('number'),
  fixedMarkdown: attr('string'),
  fixedElement: belongsTo('element', { async: false, inverse: 'extension' }),
  fixedExtension: belongsTo('extension', { async: false, inverse: null }),
  fixedBackboneElement: belongsTo('backbone-element', { async: false, inverse: null }),
  fixedNarrative: belongsTo('narrative', { async: false }),
  fixedAnnotation: belongsTo('annotation', { async: false }),
  fixedAttachment: belongsTo('attachment', { async: false }),
  fixedIdentifier: belongsTo('identifier', { async: false }),
  fixedCodeableConcept: belongsTo('codeable-concept', { async: false }),
  fixedCoding: belongsTo('coding', { async: false }),
  fixedQuantity: belongsTo('quantity', { async: false }),
  fixedDuration: belongsTo('duration', { async: false }),
  fixedSimpleQuantity: belongsTo('quantity', { async: false }),
  fixedDistance: belongsTo('distance', { async: false }),
  fixedCount: belongsTo('count', { async: false }),
  fixedMoney: belongsTo('money', { async: false }),
  fixedAge: belongsTo('age', { async: false }),
  fixedRange: belongsTo('range', { async: false }),
  fixedPeriod: belongsTo('period', { async: false }),
  fixedRatio: belongsTo('ratio', { async: false }),
  fixedReference: belongsTo('reference', { async: false }),
  fixedSampledData: belongsTo('sampled-data', { async: false }),
  fixedSignature: belongsTo('signature', { async: false }),
  fixedHumanName: belongsTo('human-name', { async: false }),
  fixedAddress: belongsTo('address', { async: false }),
  fixedContactPoint: belongsTo('contact-point', { async: false }),
  fixedTiming: belongsTo('timing', { async: false }),
  fixedMeta: belongsTo('meta', { async: false }),
  fixedElementDefinition: belongsTo('element-definition', { async: false, inverse: null }),
  fixedContactDetail: belongsTo('contact-detail', { async: false }),
  fixedContributor: belongsTo('contributor', { async: false }),
  fixedDosage: belongsTo('dosage', { async: false }),
  fixedRelatedArtifact: belongsTo('related-artifact', { async: false }),
  fixedUsageContext: belongsTo('usage-context', { async: false }),
  fixedDataRequirement: belongsTo('data-requirement', { async: false }),
  fixedParameterDefinition: belongsTo('parameter-definition', { async: false }),
  fixedTriggerDefinition: belongsTo('trigger-definition', { async: false }),
  patternBoolean: attr('boolean', { allowNull: true }),
  patternInteger: attr('number'),
  patternDecimal: attr('number'),
  patternBase64Binary: attr('string'),
  patternInstant: attr('string'),
  patternString: attr('string'),
  patternUri: attr('string'),
  patternDate: attr('date'),
  patternDateTime: attr('date'),
  patternTime: attr('date'),
  patternCode: attr('string'),
  patternOid: attr('string'),
  patternUuid: attr('string'),
  patternId: attr('string'),
  patternUnsignedInt: attr('number'),
  patternPositiveInt: attr('number'),
  patternMarkdown: attr('string'),
  patternElement: belongsTo('element', { async: false, inverse: 'extension' }),
  patternExtension: belongsTo('extension', { async: false, inverse: null }),
  patternBackboneElement: belongsTo('backbone-element', { async: false, inverse: null }),
  patternNarrative: belongsTo('narrative', { async: false }),
  patternAnnotation: belongsTo('annotation', { async: false }),
  patternAttachment: belongsTo('attachment', { async: false }),
  patternIdentifier: belongsTo('identifier', { async: false }),
  patternCodeableConcept: belongsTo('codeable-concept', { async: false }),
  patternCoding: belongsTo('coding', { async: false }),
  patternQuantity: belongsTo('quantity', { async: false }),
  patternDuration: belongsTo('duration', { async: false }),
  patternSimpleQuantity: belongsTo('quantity', { async: false }),
  patternDistance: belongsTo('distance', { async: false }),
  patternCount: belongsTo('count', { async: false }),
  patternMoney: belongsTo('money', { async: false }),
  patternAge: belongsTo('age', { async: false }),
  patternRange: belongsTo('range', { async: false }),
  patternPeriod: belongsTo('period', { async: false }),
  patternRatio: belongsTo('ratio', { async: false }),
  patternReference: belongsTo('reference', { async: false }),
  patternSampledData: belongsTo('sampled-data', { async: false }),
  patternSignature: belongsTo('signature', { async: false }),
  patternHumanName: belongsTo('human-name', { async: false }),
  patternAddress: belongsTo('address', { async: false }),
  patternContactPoint: belongsTo('contact-point', { async: false }),
  patternTiming: belongsTo('timing', { async: false }),
  patternMeta: belongsTo('meta', { async: false }),
  patternElementDefinition: belongsTo('element-definition', { async: false, inverse: null }),
  patternContactDetail: belongsTo('contact-detail', { async: false }),
  patternContributor: belongsTo('contributor', { async: false }),
  patternDosage: belongsTo('dosage', { async: false }),
  patternRelatedArtifact: belongsTo('related-artifact', { async: false }),
  patternUsageContext: belongsTo('usage-context', { async: false }),
  patternDataRequirement: belongsTo('data-requirement', { async: false }),
  patternParameterDefinition: belongsTo('parameter-definition', { async: false }),
  patternTriggerDefinition: belongsTo('trigger-definition', { async: false }),
  example: hasMany('element-definition-example', { async: true }),
  minValueDate: attr('date'),
  minValueDateTime: attr('date'),
  minValueInstant: attr('string'),
  minValueTime: attr('date'),
  minValueDecimal: attr('number'),
  minValueInteger: attr('number'),
  minValuePositiveInt: attr('number'),
  minValueUnsignedInt: attr('number'),
  minValueQuantity: belongsTo('quantity', { async: false }),
  maxValueDate: attr('date'),
  maxValueDateTime: attr('date'),
  maxValueInstant: attr('string'),
  maxValueTime: attr('date'),
  maxValueDecimal: attr('number'),
  maxValueInteger: attr('number'),
  maxValuePositiveInt: attr('number'),
  maxValueUnsignedInt: attr('number'),
  maxValueQuantity: belongsTo('quantity', { async: false }),
  maxLength: attr('number'),
  condition: attr(),
  constraint: hasMany('element-definition-constraint', { async: true }),
  mustSupport: attr('boolean', { allowNull: true }),
  isModifier: attr('boolean', { allowNull: true }),
  isSummary: attr('boolean', { allowNull: true }),
  binding: belongsTo('element-definition-binding', { async: false }),
  mapping: hasMany('element-definition-mapping', { async: true })
});